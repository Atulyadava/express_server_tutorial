Express server:-Express.js is a small framework that works on top of Node.js web server functionality to simplify its APIs
 and add helpful new features.It makes it easier to organize your application’s functionality with middleware and routing. 

why we use express.js:-
1-Develops Node.js web applications quickly and easily.
2-It’s simple to set up and personalise.
3-Allows you to define application routes using HTTP methods and URLs.
4-Includes a number of middleware modules that can be used to execute additional requests and responses activities.
5-Allows you to specify a middleware for handling errors.

How to Setup Express Server:-
setp-1: npm init
setp-2: npm install express --save

Step 4::- Now we will set all the routes for our application.
Syntax:-
The basic syntax of these types of routes looks like this, the given function will execute when the path and the request method resemble.

  app.anyMethod(path, function)

1.With app.get() we are configuring our first route, it requires two arguments first one is the path and, 
the second one is a function that will be executed when anyone requeststhis path with GET method. The express provides the 
request and response object as a parameter to all such typesof functions.
2.The req is a giant object which will be received
from the user and res is an object which will be sent to the user after the function finishes execution.
3. The send() method takes a string, object, array, or buffer as an argument and is used to send the data object back to the client
 as an HTTP response, also there are lots of types of response in express like res.json() which is used to send JSON object
, res.sendFile() which is used to send a file, etc.
4.Call the listen() function, It requires path and callback as an argument. It starts listening to the connection on the
 specified path, the default host is localhost
5.The set() function is used to set HTTP header’s content type as HTML. When the browser receives this response it will be
 interpreted as HTML instead of plain text.
Step 5::- Now we will see how to send data to server.
6.The express.json() middleware is used to parses the incoming request object as a JSON object.
 The app.use() is the syntax to use any middleware.
7.After then we have created a route on path ‘/’ for post request. 

EXAMPLE:---1

const express = require('express');
const sharp = require('sharp');
const fs = require('fs');
const cors = require('cors'); // Import the cors middleware.

const app = express();
const port = 3000;

// Enable CORS for your Angular app's domain.
app.use(cors({
  origin: 'http://localhost:4200', // Replace with your Angular app's URL.
  methods: 'POST', // Allow POST requests.
}));

app.use(express.json());

app.post('/convert-to-webp', async (req, res) => {
  try {
    const { imagePath, outputPath } = req.body; // The image path and output path provided in the request body.
    
    // Use Sharp to read the image and convert it to WebP.
    await sharp(imagePath).toFile(outputPath);

    res.status(200).send('Image converted and saved as WebP.');
  } catch (error) {
    console.log(error);
    res.status(500).send('An error occurred during image conversion.');
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});



Topic 2-:::- Serving entire directory using middleware-:::-   
Express provides us a middleware express.static(), it accepts two arguments first one is the absolute root path of the directory whose files we are going to serve. 
We can simply use it to serve static files, by providing to app.use().

Syntax://Static

app.use(path, express.static(root, [options]));

Example 3: Sending a single file on a route with the sendFile() function.

Syntax://dynamic from get request
res.sendFile(fileUrl)

1.First of all, we are importing an inbuilt module `path`, because later we are going to use one of the functions provided by this module.
2.We are simply mounting a middleware at the ‘/static’ route.
3.The static() middleware requires an absolute path so we use the path module’s join method.
4.The join() method takes two parameters and joins them as a path, in NodeJS we have a global attribute __dirname which contains the path of the directory in which the current file exists.
5.We are providing that joined path to middleware so that it can start serving the files inside that directory on the given path.

const express = require('express'); 

EXAMPLE:----2
const app = express(); 
const PORT = 3000; 

const path = require('path') 
app.use('/static', express.static(path.join(__dirname, 'Static Files'))) 


app.listen(PORT, (error) =>{ 
	if(!error) 
		console.log("Server is Successfully Running, 
				and App is listening on port "+ PORT) 
	else
		console.log("Error occurred, server can't start", error); 
	} 
);


EXAMPLE:---3

const express = require('express'); 
const path = require('path'); 

const app = express(); 
const PORT = 3000; 

app.get('/file', (req, res)=>{ 
	res.sendFile(path.join(__dirname,'image.jpg')); 
}); 

app.listen(PORT, (error) =>{ 
	if(!error) 
		console.log("Server is Successfully Running, and App is listening on port "+ PORT) 
	else
		console.log("Error occurred, server can't start", error); 
	} 
); 
